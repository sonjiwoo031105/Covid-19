{"version":3,"sources":["components/Header.js","components/Contents.js","App.js","reportWebVitals.js","index.js"],"names":["Header","className","Contents","useState","confirmedData","setConfirmedData","quarantinedData","setQuarantinedData","comparedData","setComparedData","useEffect","fetchEvents","a","axios","get","res","makeData","data","items","arr","reduce","acc","cur","currentDate","Date","year","getFullYear","month","getMonth","date","getDate","confirmed","Confirmed","active","Active","death","Deaths","recovered","Recovered","findItem","find","push","labels","map","datasets","label","backgroundColor","fill","borderColor","last","length","options","title","display","text","fontSize","legend","position","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7d45564e.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Header = () => {\r\n    return (\r\n        <header className=\"header\">\r\n        <h1>COVID-19</h1>\r\n        <select>\r\n          <option>국내</option>\r\n          <option>세계</option>\r\n        </select>\r\n      </header>\r\n    )\r\n}\r\n\r\nexport default Header","import {useState, useEffect} from 'react'\r\nimport {Bar, Doughnut, Line} from 'react-chartjs-2'\r\n\r\nimport axios from 'axios'\r\n\r\nconst Contents = () => {\r\n\r\n    const [confirmedData, setConfirmedData] = useState({})\r\n    const [quarantinedData, setQuarantinedData] = useState({})\r\n    const [comparedData, setComparedData] = useState({})\r\n\r\n\r\n\r\n    useEffect(()=>{\r\n        const fetchEvents = async () => {\r\n            const res = await axios.get(\"https://api.covid19api.com/total/dayone/country/kr\")\r\n            makeData(res.data)\r\n        }\r\n        const makeData = (items) => {\r\n            const arr = items.reduce((acc, cur) => {\r\n                const currentDate = new Date(cur.Date);\r\n                const year = currentDate.getFullYear();\r\n                const month = currentDate.getMonth();\r\n                const date = currentDate.getDate();\r\n\r\n                const confirmed = cur.Confirmed;\r\n                const active = cur.Active;\r\n                const death = cur.Deaths;\r\n                const recovered = cur.Recovered;\r\n\r\n                const findItem = acc.find(a => a.year === year && a.month === month);\r\n\r\n                if(!findItem){\r\n                    acc.push({year, month, date, confirmed, active, death, recovered})\r\n                }\r\n\r\n                if(findItem && findItem.date < date){\r\n                    findItem.active = active;\r\n                    findItem.death = death;\r\n                    findItem.date = date;\r\n                    findItem.year = year;\r\n                    findItem.month = month;\r\n                    findItem.recovered = recovered;\r\n                    findItem.confirmed = confirmed;\r\n                }\r\n\r\n                return acc;\r\n            }, [])\r\n\r\n            const labels = arr.map(a => `${a.month+1}월`);\r\n\r\n            setConfirmedData(\r\n                {\r\n                    labels,\r\n                    datasets: [\r\n                        {\r\n                            label: \"국내 누적 확진자\",\r\n                            backgroundColor: \"salmon\",\r\n                            fill: true,\r\n                            data: arr.map(a => a.confirmed)\r\n                        }\r\n                    ]\r\n                }\r\n            );\r\n\r\n            setQuarantinedData(\r\n                {\r\n                    labels,\r\n                    datasets: [\r\n                        {\r\n                            label: \"월별 격리자 현황\",\r\n                            borderColor: \"salmon\",\r\n                            fill: false,\r\n                            data: arr.map(a => a.active)\r\n                        }\r\n                    ]\r\n                }\r\n            );\r\n\r\n            const last = arr[arr.length-1]\r\n            setComparedData(\r\n                {\r\n                    labels: [\"확진자\", \"격리해제\", \"사망\"],\r\n                    datasets: [\r\n                        {\r\n                            label: \"누적 확진, 해제, 사망 비율\",\r\n                            backgroundColor: [\"#ff3d67\", \"#059bff\", \"#ffc233\"],\r\n                            borderColor: [\"#ff3d67\", \"#059bff\", \"#ffc233\"],\r\n                            fill: false,\r\n                            data: [last.confirmed, last.recovered, last.death]\r\n                        }\r\n                    ]\r\n                }\r\n            );\r\n        }\r\n\r\n        fetchEvents();\r\n    }, [])\r\n\r\n    return (\r\n        <section>\r\n        <h2>국내 코로나 현황</h2>\r\n        <div className=\"contents\">\r\n            <div>\r\n                <Bar data={confirmedData} options={\r\n                    { title: {display: true, text: \"누적 확진자 추이\", fontSize: 16},\r\n                      legend: {display: true, position: \"bottom\"} \r\n                    }\r\n                } />\r\n            </div>\r\n\r\n            <div>\r\n                <Line data={quarantinedData} options={\r\n                    { \r\n                        title: {display: true, text: \"월별 격리자 현황\", fontSize: 16}, \r\n                        legend: {display: true, position: \"bottom\"}\r\n                    }\r\n                } />\r\n            </div>\r\n\r\n            <div>\r\n                <Doughnut data={comparedData} options={\r\n                    { \r\n                        title: {display: true, text: `누적 확진, 해제, 사망 (${new Date().getMonth()+1}월)`, fontSize: 16},\r\n                        legend: {display: true, position: \"bottom\"} \r\n                    }\r\n                } />\r\n            </div>\r\n\r\n        </div>\r\n      </section>\r\n    )\r\n}\r\n\r\nexport default Contents","import './App.css';\nimport Header from './components/Header'\nimport Contents from './components/Contents'\n\nfunction App() {\n  return (\n    <div className=\"App\">      \n      <Header />\n      <Contents />\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}